
function asyncGeneratorStep(t, e, n, r, a, o, i) {
    try {
        var c = t[o](i),
            s = c.value
    } catch (t) {
        return void n(t)
    }
    c.done ? e(s) : Promise.resolve(s).then(r, a)
}

function _asyncToGenerator(t) {
    return function () {
        var e = this,
            n = arguments;
        return new Promise(function (r, a) {
            var o = t.apply(e, n);

            function i(t) {
                asyncGeneratorStep(o, r, a, i, c, "next", t)
            }

            function c(t) {
                asyncGeneratorStep(o, r, a, i, c, "throw", t)
            }
            i(void 0)
        })
    }
}
var total = [[324942, 4387] // 臺北市
            ,[755004, 8348] // 新北市
            ,[71769, 837] // 基隆市
            ,[374204, 5845] // 桃園市
            ,[56379, 1227] // 新竹市
            ,[79034, 1552] // 新竹縣
            ,[61829, 1221] // 宜蘭縣
            ,[55969, 1676] // 苗栗縣
            ,[320940, 10756] // 臺中市
            ,[40536, 1489] // 南投縣
            ,[126781, 5541] // 彰化縣
            ,[46786, 1716] // 雲林縣
            ,[33957, 1283] // 嘉義縣
            ,[21579, 783] // 嘉義市
            ,[189880, 6987] // 臺南市
            ,[325894, 10001] // 高雄市
            ,[84862, 3150] // 屏東縣
            ,[48154, 901] // 花蓮縣
            ,[24656, 789] // 臺東縣
        ]           
var TaiwanMap = new Vue({
    el: "#app",
    data: {
        h1: "請選擇一個縣市",
        h2: "",
        h3: ""
    },
    methods: {
        getTaiwanMap: function () {
            var t = _asyncToGenerator(regeneratorRuntime.mark(function t() {
                var e, n, r, a, o, i, c = this;
                return regeneratorRuntime.wrap(function (t) {
                    for (; ;) switch (t.prev = t.next) {
                        case 0:
                            return e = this.$refs.map.offsetWidth.toFixed(), n = this.$refs.map.offsetHeight.toFixed(), a = window.screen.width, r = a > 1366 ? 11e3 : a <= 1366 && a > 480 ? 9e3 : 6e3, t.next = 5, d3.geo.path().projection(d3.geo.mercator().center([121, 24]).scale(r).translate([e / 2, n / 2.5]));
                        case 5:
                            return o = t.sent, t.next = 8, d3.select("#svg").attr("width", e).attr("height", n).attr("viewBox", "0 0 ".concat(e, " ").concat(n));
                        case 8:
                            return i = t.sent, "dist/taiwan.geojson", t.next = 12, d3.json("dist/taiwan.geojson", function (t, e) {
                                if (t) throw t;
                                i.selectAll("path").data(e.features).enter().append("path").attr("d", o).attr({
                                    id: function (t) {
                                        return "city" + t.properties.COUNTYCODE
                                    }
                                }).on("click", function (t) {
                                    c.h1 = t.properties.COUNTYNAME, document.querySelector(".active") && document.querySelector(".active").classList.remove("active"), document.getElementById("city" + t.properties.COUNTYCODE).classList.add("active")
                                    c.h2 =  `確診數: ${total[t.properties.COUNTYCODE][0]}`
                                    c.h3 =  `新增數: +${total[t.properties.COUNTYCODE][1]}`
                                })
                            });
                        case 12:
                            return t.abrupt("return", i);
                        case 13:
                        case "end":
                            return t.stop()
                    }
                }, t, this)
            }));
            return function () {
                return t.apply(this, arguments)
            }
        }()
    },
    mounted: function () {
        this.getTaiwanMap()
    }
});